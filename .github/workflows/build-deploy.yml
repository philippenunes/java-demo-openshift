# 🚀 GITHUB ACTIONS - PIPELINE CI/CD COMPLETO
# Este workflow executa testes, build e deploy automático via GitOps

name: 🏗️ Build and Deploy

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'pom.xml'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]

env:
  # 🎯 Configurações do projeto
  JAVA_VERSION: '17'
  MAVEN_OPTS: '-Xmx1024m'
  PROJECT_NAME: 'my-java-app'
  NAMESPACE: 'philippenunes-dev'

jobs:
  # 🧪 TESTES E VALIDAÇÕES
  test:
    name: 🧪 Tests & Quality Gates
    runs-on: self-hosted
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: ☕ Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: 🧪 Run Tests
      run: |
        echo "🧪 Running unit tests..."
        mvn test
        echo "✅ Tests completed - checking results..."
        
    - name: 📊 Test Report
      if: always()  # sempre roda, independente do sucesso/falha dos testes
      shell: powershell
      run: |
        Write-Host "📊 Test Results Summary:"

        $reportDir = "target/surefire-reports"

        if (Test-Path $reportDir) {
            $testFiles = Get-ChildItem -Path $reportDir -Filter "TEST-*.xml" -ErrorAction SilentlyContinue

            if ($testFiles.Count -gt 0) {
                Write-Host "✅ Test reports generated successfully"
                foreach ($file in $testFiles) {
                    Write-Host "  - $($file.Name)"
                }
            } else {
                Write-Host "📝 No test reports found, but tests may have run successfully"
            }
        } else {
            Write-Host "⚠️ Directory '$reportDir' not found"
        }

    - name: ✅ Code Coverage
      run: |
        echo "📊 Generating coverage report..."
        mvn jacoco:report || echo "📝 Coverage plugin not configured"
        
  # 🏗️ BUILD NO OPENSHIFT (apenas no main)
  build:
    name: 🏗️ OpenShift Build
    runs-on: self-hosted
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
        
    - name: ✅ Verify Environment
      run: |
        echo "✅ Verifying self-hosted environment..."
        oc version --client
        oc whoami --show-server || echo "⚠️ Not logged into OpenShift"
      
    - name: 🔐 OpenShift Login Check
      run: |
        echo "🔐 Checking OpenShift connection..."
        echo "Current user: $(oc whoami)"
        echo "Current server: $(oc whoami --show-server)"
        echo "Current namespace: $(oc project -q)"
        
    - name: 🏗️ Trigger Build
      run: |
        echo "🏗️ Starting OpenShift build..."
        echo "Project: ${{ env.PROJECT_NAME }}"
        echo "Namespace: ${{ env.NAMESPACE }}"
        
        # Verificar se o namespace existe
        oc get namespace ${{ env.NAMESPACE }} || echo "⚠️ Namespace may not exist"
        
        # Verificar se o BuildConfig existe
        oc get buildconfig ${{ env.PROJECT_NAME }} -n ${{ env.NAMESPACE }} || echo "⚠️ BuildConfig may not exist"
        
        # Iniciar o build
        oc start-build ${{ env.PROJECT_NAME }} -n ${{ env.NAMESPACE }} --follow --wait
        
    - name: 📦 Get Latest Image
      id: image
      run: |
        echo "📦 Getting latest image digest..."
        BUILD_NUMBER=$(oc get builds -n ${{ env.NAMESPACE }} --sort-by=.metadata.creationTimestamp -o jsonpath='{.items[-1].metadata.name}' | grep ${{ env.PROJECT_NAME }})
        echo "Latest build: $BUILD_NUMBER"
        echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
        
    - name: ✅ Build Success Notification
      run: |
        echo "✅ Build completed successfully!"
        echo "🏗️ Build: ${{ steps.image.outputs.build_number }}"
        echo "🎯 Next: ArgoCD Image Updater will detect and deploy automatically"

  # 📊 DEPLOYMENT STATUS
  status:
    name: 📊 Deployment Status
    runs-on: self-hosted
    needs: build
    if: always()
    steps:
    - name: 📊 Pipeline Summary
      run: |
        echo "## 🚀 Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🧪 Tests | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🏗️ Build | ${{ needs.build.result == 'success' && '✅ Completed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🎯 GitOps | 🔄 ArgoCD Image Updater will handle deployment |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔄 Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. ✅ ArgoCD Image Updater detects new image" >> $GITHUB_STEP_SUMMARY
        echo "2. ✅ Automatic Git commit with new image digest" >> $GITHUB_STEP_SUMMARY
        echo "3. ✅ ArgoCD deploys automatically" >> $GITHUB_STEP_SUMMARY