# 🚀 GITHUB ACTIONS - PIPELINE CI/CD COMPLETO
# Workflow de testes, build e deploy via GitOps no OpenShift

name: 🏗️ Build and Deploy

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'pom.xml'
      - '.github/workflows/**'
      # k8s/** removido - mudanças em manifests GitOps não disparam builds
  pull_request:
    branches: [ main ]

env:
  JAVA_VERSION: '17'
  MAVEN_OPTS: '-Xmx1024m'
  PROJECT_NAME: 'my-java-app'
  NAMESPACE: 'philippenunes-dev'

jobs:
  # 🧪 TESTES E VALIDAÇÕES
  test:
    name: 🧪 Tests & Quality Gates
    runs-on: self-hosted
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, 'automatic update') }}
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: ☕ Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: 🧪 Run Tests
      shell: pwsh
      run: |
        Write-Host "🧪 Running unit tests..."
        mvn test
        Write-Host "✅ Tests completed successfully!"

    - name: ✅ Code Coverage
      shell: pwsh
      run: |
        Write-Host "📊 Generating coverage report..."
        try {
          mvn jacoco:report
        } catch {
          Write-Host "📝 Coverage plugin not configured"
        }

  # 🏗️ BUILD NO OPENSHIFT
  build:
    name: 🏗️ OpenShift Build
    runs-on: self-hosted
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: ✅ Verify Environment
      shell: pwsh
      run: |
        Write-Host "✅ Verifying self-hosted environment..."
        if (Get-Command oc -ErrorAction SilentlyContinue) {
          Write-Host "✅ OpenShift CLI found"
          try {
            $server = oc whoami --show-server
            Write-Host "✅ Connected to OpenShift server: $server"
          } catch {
            Write-Host "⚠️ Not logged into OpenShift"
          }
        } else {
          Write-Host "❌ OpenShift CLI not found"
        }

    - name: 🔐 OpenShift Login
      shell: pwsh
      run: |
        if (-not $env:OPENSHIFT_TOKEN -or -not $env:OPENSHIFT_SERVER) {
          Write-Host "⚠️ OPENSHIFT_TOKEN or OPENSHIFT_SERVER not set. Skipping login."
          exit 0
        }
        Write-Host "🔐 Logging into OpenShift..."
        oc login --token=$env:OPENSHIFT_TOKEN --server=$env:OPENSHIFT_SERVER --insecure-skip-tls-verify
        $user = oc whoami
        Write-Host "✅ Logged in as $user"

    - name: 🏗️ Trigger Build
      shell: pwsh
      run: |
        Write-Host "🏗️ Starting OpenShift build..."
        Write-Host "Project: $env:PROJECT_NAME"
        Write-Host "Namespace: $env:NAMESPACE"

        try {
          oc get namespace $env:NAMESPACE | Out-Null
        } catch {
          Write-Host "⚠️ Namespace $env:NAMESPACE may not exist"
        }

        try {
          oc get buildconfig $env:PROJECT_NAME -n $env:NAMESPACE | Out-Null
        } catch {
          Write-Host "⚠️ BuildConfig $env:PROJECT_NAME may not exist"
        }

        oc start-build $env:PROJECT_NAME -n $env:NAMESPACE --follow --wait

    - name: 📦 Get Latest Image
      id: image
      shell: pwsh
      run: |
        Write-Host "📦 Getting latest build digest..."
        $build = oc get builds -n $env:NAMESPACE --sort-by=.metadata.creationTimestamp -o json | ConvertFrom-Json
        $latestBuild = $build.items[-1].metadata.name
        Write-Host "Latest build: $latestBuild"
        "build_number=$latestBuild" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: ✅ Build Success Notification
      shell: pwsh
      run: |
        Write-Host "✅ Build completed successfully!"
        Write-Host "🏗️ Build: $($env:GITHUB_OUTPUT)"
        Write-Host "🎯 Next: ArgoCD Image Updater will detect and deploy automatically"

  # 📊 DEPLOYMENT STATUS
  status:
    name: 📊 Deployment Status
    runs-on: self-hosted
    needs: build
    if: always()
    steps:
    - name: 📊 Pipeline Summary
      shell: pwsh
      run: |
        Write-Output "## 🚀 Pipeline Summary" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "| Stage | Status |" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "|-------|--------|" >> $env:GITHUB_STEP_SUMMARY
        
        $testStatus = if ('${{ needs.test.result }}' -eq 'success') { '✅ Passed' } else { '❌ Failed' }
        Write-Output "| 🧪 Tests | $testStatus |" >> $env:GITHUB_STEP_SUMMARY
        
        $buildStatus = if ('${{ needs.build.result }}' -eq 'success') { '✅ Completed' } else { '❌ Failed' }
        Write-Output "| 🏗️ Build | $buildStatus |" >> $env:GITHUB_STEP_SUMMARY
        
        Write-Output "| 🎯 GitOps | 🔄 ArgoCD Image Updater will handle deployment |" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "### 🔄 Next Steps:" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "1. ✅ ArgoCD Image Updater detects new image" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "2. ✅ Automatic Git commit with new image digest" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "3. ✅ ArgoCD deploys automatically" >> $env:GITHUB_STEP_SUMMARY