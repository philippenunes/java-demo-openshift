# 🚀 GITHUB ACTIONS - PIPELINE CI/CD COMPLETO
# Este workflow executa testes, build e deploy automático via GitOps

name: 🏗️ Build and Deploy

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'pom.xml'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]

env:
  # 🎯 Configurações do projeto
  JAVA_VERSION: '17'
  MAVEN_OPTS: '-Xmx1024m'
  PROJECT_NAME: 'my-java-app'
  NAMESPACE: 'philippenunes-dev'

jobs:
  # 🧪 TESTES E VALIDAÇÕES
  test:
    name: 🧪 Tests & Quality Gates
    runs-on: self-hosted
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: ☕ Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: 🧪 Run Tests
      run: |
        echo "🧪 Running unit tests..."
        mvn test
        echo "✅ Tests completed successfully!"

    - name: ✅ Code Coverage
      run: |
        echo "📊 Generating coverage report..."
        mvn jacoco:report || echo "📝 Coverage plugin not configured"
        
  # 🏗️ BUILD NO OPENSHIFT (apenas no main)
  build:
    name: 🏗️ OpenShift Build
    runs-on: self-hosted
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
        
    - name: ✅ Verify Environment
      shell: pwsh
      run: |
        Write-Host "✅ Verifying self-hosted environment..."
        oc version --client
        try { oc whoami --show-server } catch { Write-Host "⚠️ Not logged into OpenShift" }
      
    - name: 🔐 OpenShift Login Check
      shell: pwsh
      run: |
        Write-Host "🔐 Checking OpenShift connection..."
        try {
          oc version --client
          Write-Host "✅ OpenShift CLI found"
        } catch {
          Write-Host "❌ OpenShift CLI not found - skipping OpenShift operations"
          exit 0
        }
        
        try {
          $user = oc whoami 2>$null
          if ($user) {
            Write-Host "✅ Logged in as: $user"
          } else {
            Write-Host "⚠️ Not logged into OpenShift"
          }
        } catch {
          Write-Host "⚠️ Not logged into OpenShift"
        }
        
    - name: 🏗️ Trigger Build
      shell: pwsh
      run: |
        Write-Host "🏗️ Starting OpenShift build..."
        Write-Host "Project: '${{ env.PROJECT_NAME }}'"
        Write-Host "Namespace: '${{ env.NAMESPACE }}'"
        
        try { oc get namespace '${{ env.NAMESPACE }}' } catch { Write-Host "⚠️ Namespace may not exist" }
        try { oc get buildconfig '${{ env.PROJECT_NAME }}' -n '${{ env.NAMESPACE }}' } catch { Write-Host "⚠️ BuildConfig may not exist" }
        
        oc start-build '${{ env.PROJECT_NAME }}' -n '${{ env.NAMESPACE }}' --follow --wait
        
    - name: 📦 Get Latest Image
      id: image
      shell: pwsh
      run: |
        Write-Host "📦 Getting latest image digest..."
        $BUILD_NUMBER = oc get builds -n '${{ env.NAMESPACE }}' --sort-by=.metadata.creationTimestamp -o jsonpath='{.items[-1].metadata.name}'
        $BUILD_NUMBER = $BUILD_NUMBER | Select-String '${{ env.PROJECT_NAME }}'
        Write-Host "Latest build: $BUILD_NUMBER"
        "build_number=$BUILD_NUMBER" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        
    - name: ✅ Build Success Notification
      run: |
        echo "✅ Build completed successfully!"
        echo "🏗️ Build: ${{ steps.image.outputs.build_number }}"
        echo "🎯 Next: ArgoCD Image Updater will detect and deploy automatically"

  # 📊 DEPLOYMENT STATUS
  status:
    name: 📊 Deployment Status
    runs-on: self-hosted
    needs: build
    if: always()
    steps:
    - name: 📊 Pipeline Summary
      run: |
        echo "## 🚀 Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🧪 Tests | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🏗️ Build | ${{ needs.build.result == 'success' && '✅ Completed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🎯 GitOps | 🔄 ArgoCD Image Updater will handle deployment |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔄 Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. ✅ ArgoCD Image Updater detects new image" >> $GITHUB_STEP_SUMMARY
        echo "2. ✅ Automatic Git commit with new image digest" >> $GITHUB_STEP_SUMMARY
        echo "3. ✅ ArgoCD deploys automatically" >> $GITHUB_STEP_SUMMARY