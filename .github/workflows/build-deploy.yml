# üöÄ GITHUB ACTIONS - PIPELINE CI/CD COMPLET    - name: ‚úÖ Code Coverage
      shell: powershell
      run: |
        Write-Host "\ud83d\udcca Generating coverage report..."
        try {
          mvn jacoco:report
        } catch {
          Write-Host "\ud83d\udccf Coverage plugin not configured"
        }ste workflow executa testes, build e deploy autom√°tico via GitOps

name: üèóÔ∏è Build and Deploy

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'pom.xml'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]

env:
  JAVA_VERSION: '17'
  MAVEN_OPTS: '-Xmx1024m'
  PROJECT_NAME: 'my-java-app'
  NAMESPACE: 'philippenunes-dev'

jobs:
  # üß™ TESTES E VALIDA√á√ïES
  test:
    name: üß™ Tests & Quality Gates
    runs-on: self-hosted
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4

    - name: ‚òï Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: üß™ Run Tests
      shell: powershell
      run: |
        Write-Host "üß™ Running unit tests..."
        mvn test
        Write-Host "‚úÖ Tests completed successfully!"

    - name: ‚úÖ Code Coverage
      shell: powershell
      run: |
        Write-Host "üìä Generating coverage report..."
        mvn jacoco:report -ErrorAction SilentlyContinue
        if ($LASTEXITCODE -ne 0) { Write-Host "üìù Coverage plugin not configured" }

  # üèóÔ∏è BUILD NO OPENSHIFT (apenas no main)
  build:
    name: üèóÔ∏è OpenShift Build
    runs-on: self-hosted
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
        
    - name: ‚úÖ Verify Environment
      shell: powershell
      run: |
        Write-Host "‚úÖ Verifying self-hosted environment..."
        if (-not (Get-Command oc -ErrorAction SilentlyContinue)) {
          Write-Host "‚ùå OpenShift CLI not found - skipping OpenShift operations"
          exit 0
        }
        oc version --client
        try { oc whoami --show-server } catch { Write-Host "‚ö†Ô∏è Not logged into OpenShift" }
      
    - name: üîê OpenShift Login Check
      shell: powershell
      run: |
        Write-Host "üîê Checking OpenShift connection..."
        try {
          $user = oc whoami 2>$null
          if ($user) { Write-Host "‚úÖ Logged in as: $user" }
          else { Write-Host "‚ö†Ô∏è Not logged into OpenShift" }
        } catch { Write-Host "‚ö†Ô∏è Not logged into OpenShift" }

    - name: üèóÔ∏è Trigger Build
      shell: powershell
      run: |
        Write-Host "üèóÔ∏è Starting OpenShift build..."
        Write-Host "Project: $env:PROJECT_NAME"
        Write-Host "Namespace: $env:NAMESPACE"

        try { oc get namespace $env:NAMESPACE } catch { Write-Host "‚ö†Ô∏è Namespace may not exist" }
        try { oc get buildconfig $env:PROJECT_NAME -n $env:NAMESPACE } catch { Write-Host "‚ö†Ô∏è BuildConfig may not exist" }

        oc start-build $env:PROJECT_NAME -n $env:NAMESPACE --follow --wait

    - name: üì¶ Get Latest Image
      id: image
      shell: powershell
      run: |
        Write-Host "üì¶ Getting latest image digest..."
        $builds = oc get builds -n $env:NAMESPACE --sort-by=.metadata.creationTimestamp -o json
        $latestBuild = ($builds | ConvertFrom-Json).items[-1].metadata.name
        Write-Host "Latest build: $latestBuild"
        echo "build_number=$latestBuild" >> $env:GITHUB_OUTPUT

    - name: ‚úÖ Build Success Notification
      shell: powershell
      run: |
        Write-Host "‚úÖ Build completed successfully!"
        Write-Host "üèóÔ∏è Build: $($env:build_number)"
        Write-Host "üéØ Next: ArgoCD Image Updater will detect and deploy automatically"

  # üìä DEPLOYMENT STATUS
  status:
    name: üìä Deployment Status
    runs-on: self-hosted
    needs: build
    if: always()
    steps:
    - name: üìä Pipeline Summary
      shell: powershell
      run: |
        "## \ud83d\ude80 Pipeline Summary" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8
        "| Stage | Status |" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
        "|-------|--------|" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
        
        $testStatus = if ('${{ needs.test.result }}' -eq 'success') { '\u2705 Passed' } else { '\u274c Failed' }
        $buildStatus = if ('${{ needs.build.result }}' -eq 'success') { '\u2705 Completed' } else { '\u274c Failed' }
        
        "| \ud83e\uddea Tests | $testStatus |" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
        "| \ud83c\udfd7\ufe0f Build | $buildStatus |" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
        "| \ud83c\udfaf GitOps | \ud83d\udd04 ArgoCD Image Updater will handle deployment |" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
        "" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
        "### \ud83d\udd04 Next Steps:" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
        "1. \u2705 ArgoCD Image Updater detects new image" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
        "2. \u2705 Automatic Git commit with new image digest" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
        "3. \u2705 ArgoCD deploys automatically" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append